<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41223226-0" rel="nofollow">https://mdecd2025.github.io/hw-41223226-0</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223226-0">https://github.com/mdecd2025/hw-41223226-0</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p></p>
<h2>repo</h2>
<p>在更新小組list的程式時，順便做的。(<a href="https://mdecd2025.github.io/hw-41223226-0/content/Brython.html?src=https://gist.githubusercontent.com/41223226-0/92b34d17b593cecf8e446c8045d37869/raw/b1dda5a2706a1237501ccef3a392040405ad2827/gistfile1.py">執行結果</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request

# 設定 URL
url = "https://mde.tw/list/2b.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割

# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]

# **動態插入所有學員資料，並為帳號添加超連結**
for index, student in enumerate(all_stud, start=1):
    parts = student.split()  # 用空格分割學號和帳號
    if len(parts) == 2:
        student_id, account = parts
        # 設定學號的超連結
        account_link = f"https://mdecd2025.github.io/hw-{account.strip()}"
        # 設定repo的超連結
        repo_link = f"https://github.com/mdecd2025/hw-{account.strip()}"
        
        # 插入學號和帳號的超連結，並加上repo的超連結
        brython_div1 &lt;= f"{index}. " + html.A(student_id.strip(), href=account_link) + " " 
        brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
        brython_div1 &lt;= html.BR()  # 換行
    else:
        print(f"格式錯誤，跳過此行: {student}")
</pre>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/IcTQ1r1DgVc" width="400"></iframe></p>
<h2>ipv6</h2>
<p>任務一: 請用 Brython 寫出在 id="brython_div1" 嵌入 html 連結的程式。 希望各連結能透過 http 協定連結到班上有 66 位學員的靜態網頁。 其中各學員的固定 IPv6 分別為 2001:288:6004:17:fff1:cd25:0000:b001 到 2001:288:6004:17:fff1:cd25:0000:b066, 且使用 port 8000 進行連結. 請寫出此一 Brython 程式。</p>
<p>任務二: 若各學員序號取自 https://mde.tw/cd2025/downloads/w4_2b_index.txt, 且此一資料以空白隔開序號加"." 及學號, 能否修改成以學員的學號作為 html 的標示。</p>
<p>用之前寫的在repo的全班名單程式做修改，更換學號上的超連結來達成任務。(<a href="https://mdecd2025.github.io/hw-41223226-0/content/Brython.html?src=https://gist.githubusercontent.com/41223226-0/3aae1843d762e8f2b9bd40ad9d2fdc28/raw/c734a2ccafe0f56c67a7026f1878fc0bee99c626/ipv6_2b.py">執行結果</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request
 
# 設定 URL
url = "https://mde.tw/list/2b.txt"
 
# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割
 
# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")
 
# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]
 
# **動態插入所有學員資料，並為帳號添加超連結**
for index, student in enumerate(all_stud, start=1):
    parts = student.split()  # 用空格分割學號和帳號
    if len(parts) == 2:
        student_id, account = parts
        # 設定學號的超連結（指向靜態網站）
        account_link = f"http://[2001:288:6004:17:fff1:cd25:0000:b0{index}]:8000/"
        # 設定repo的超連結
        repo_link = f"https://github.com/mdecd2025/hw-{account.strip()}"
         
        # 插入學號和帳號的超連結，並加上repo的超連結
        brython_div1 &lt;= f"{index}. " + html.A(student_id.strip(), href=account_link) + " "
        brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
        brython_div1 &lt;= html.BR()  # 換行
    else:
        print(f"格式錯誤，跳過此行: {student}")
</pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4L31gQjAnyI" width="400"></iframe></p><h1>Tasks</h1>
<p>task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作:</p>
<p>      task1 (自行製作可攜程式系統)</p>
<p>      task2 (使用 SSH 協定執行作業倉儲的推送)</p>
<p>task3 與 task4 則為 HW2 的內容之一</p>
<p>      task3 (使用 Solvespace 建立平面四連桿系統零組件)</p>
<p>      task4 (使用 Onshape 建立平面四連桿系統零組件)</p>
<p>task5 與 task6 則為 HW3 的主要內容</p>
<p>      task5 (Webots Tutorial 1 ~3)</p>
<p>      task6 (Webots Tutorial 4 ~6)</p>
<h2>task1</h2>
<p>2025/2/25</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wMIB5kMsLx4" width="400"></iframe></p>
<h3>list</h3>
<p>初版:能夠初步完成功能但不夠完善。(<a href="https://mdecd2025.github.io/hw-41223226-0/content/Brython.html?src=https://gist.githubusercontent.com/41223226-0/30de241c9e40bc2ffc16d1bd4033fac8/raw/9e8720d336e3da189f2499cd5a0a040dda08222f/test_list">執行結果</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request

# 設定 URL
url = "https://mde.tw/list/2b.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割

# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]

# **動態插入所有學員資料，並為帳號添加超連結**
for index, student in enumerate(all_stud, start=1):
    parts = student.split()  # 用空格分割學號和帳號
    if len(parts) == 2:
        student_id, account = parts
        # 設定超連結
        account_link = f"https://mdecd2025.github.io/hw-{account.strip()}"
        # 插入學號和帳號的超連結
        brython_div1 &lt;= f"{index}. {student_id.strip()} - " + html.A(account.strip(), href=account_link)
        brython_div1 &lt;= html.BR()  # 換行
    else:
        print(f"格式錯誤，跳過此行: {student}")

# 測試固定超連結
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "附加連結: " + html.A("github.com", href="https://github.com")
</pre>
<p></p>
<p>完成版:這版具有完整功能，並且能夠顯示我們全部組員的倉儲和網站。(<a href="https://mdecd2025.github.io/hw-41223226-0/content/Brython.html?src=https://gist.githubusercontent.com/41223226-0/c4dcc93708ae8e4401aead0ebc2789f2/raw/1b666a1eb90d06df7f0e623f45a6e79ee646037b/list_g3.py">執行結果</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request

# 設定 URL
url = "https://mde.tw/list/2b.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割

# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# G3組的學員學號列表
g3_students = ['41223206', '41223215', '41223226', '41223227', '41223228', '41223235']

# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]

# **動態插入 G3 組的學員資料，並為帳號添加超連結**
for index, student in enumerate(all_stud, start=1):
    parts = student.split()  # 用空格分割學號和帳號
    if len(parts) == 2:
        student_id, account = parts
        if student_id in g3_students:  # 只顯示G3組的學員
            # 設定學號的超連結
            account_link = f"https://mdecd2025.github.io/hw-{account.strip()}"
            # 設定repo的超連結
            repo_link = f"https://github.com/mdecd2025/hw-{account.strip()}"
            
            # 插入學號和帳號的超連結，並加上repo的超連結
            brython_div1 &lt;= f"{index}. " + html.A(student_id.strip(), href=account_link) + " " 
            brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
            brython_div1 &lt;= html.BR()  # 換行
    else:
        print(f"格式錯誤，跳過此行: {student}")</pre>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/IcTQ1r1DgVc" width="400"></iframe></p>
<p></p>
<h2>task2</h2>
<p>2025/2/25</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9LfZ4pMLM9U" width="400"></iframe></p>
<h3>w3</h3>
<p><span>已知各班已經參與分組的學員 Github 帳號分別如下:</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">a_all_members = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']
b_all_members = ['41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716', '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw', '41223216', '41223217', '41223248', 'emma0312', '41223242', '41223203', '41223144', '41223235', 'RAY41223215', 'hyy41223228', '41223227', '41223206', '41223226-0', 'Cloud41223237', 'Yujenchuang', '41223225', 'ljg41223220', 'supowen', 'jacky93111', '41223246', 'Liu41223244', '41223236', '41223219', '41271237', '41223249', '41223229', '41223224', '41223222', '41223231', 'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218', 'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204', '41071202', 'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10']</pre>
<p><span>接著用程式列出目前各班尚未納組的學員學號。(<a href="https://mdecd2025.github.io/hw-41223226-0/content/Brython.html?src=https://gist.githubusercontent.com/41223226-0/5ebcc947596d725f38669bc87530b1f0/raw/1ccf707f0c0b006160ef9982801d2aedc2f30ccb/test_teamless_list.py">執行結果</a>)</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request

# 設定 URL
url = "https://mde.tw/list/2b.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割

# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# 已分組的帳號名單
grouped_accounts = {
    '41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716', 
    '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw', '41223216', 
    '41223217', '41223248', 'emma0312', '41223242', '41223203', '41223144', '41223235', 
    'RAY41223215', 'hyy41223228', '41223227', '41223206', '41223226-0', 'Cloud41223237', 
    'Yujenchuang', '41223225', 'ljg41223220', 'supowen', 'jacky93111', '41223246', 'Liu41223244', 
    '41223236', '41223219', '41271237', '41223249', '41223229', '41223224', '41223222', 
    '41223231', 'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218', 
    'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204', '41071202', 
    'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10'
}

# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]

# **動態插入未分組的學號與超連結**
index = 1
for student in all_stud:
    parts = student.strip().split()  # 用空格分割
    if len(parts) == 0:
        continue  # 跳過空行
    
    student_id = parts[0]  # 學號
    account = parts[1] if len(parts) &gt; 1 else student_id  # 若帳號空白則用學號當帳號

    if account not in grouped_accounts:  # 只處理未分組帳號
        # 設定學號的超連結
        student_link = f"https://mdecd2025.github.io/hw-{account}"
        # 設定repo的超連結
        repo_link = f"https://github.com/mdecd2025/hw-{account}"
        
        # 插入學號作為超連結，並添加 repo 連結
        brython_div1 &lt;= f"{index}. " + html.A(student_id, href=student_link) + " "
        brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
        brython_div1 &lt;= html.BR()  # 換行
        index += 1</pre>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nxPS6uj0Lp0" width="400"></iframe></p>
<h2>task3</h2>
<p><span>使用 Solvespace 建立平面四連桿系統零組件</span></p><h2>task4</h2>
<h2>task5</h2>
<p><span>Webots Tutorial 1 ~3</span></p>
<p><a href="/downloads/my_first_simulation.zip">檔案下載</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/b4JZO-Pho2c" width="400"></iframe></p><h2>task6</h2>
<p><span>Webots Tutorial 4 ~6</span></p>
<p><a href="/downloads/my_first_simulation.7z">檔案下載</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fFGLjtW3PDk" width="400"></iframe></p><h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41223226</p>
<p>先由solvespace畫簡單的模型模擬旋轉路徑，然後再開始使用Webots進行模型的建立。</p>
<p><a href="https://drive.google.com/drive/folders/1tLY-tEojRbgAJaYqE_uPec3GD_iJygCl?usp=drive_link">fourbar_box_41223226</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/J6RXSYIasUw" width="400"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/tP_0JDovR00" width="400"></iframe></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 41223226</p>
<p>用<span>solvespace畫複雜的模型，然後再使用Blender進行模型的拆分和轉檔，最後在使用HW1的程式將之前建立的簡單模型改為調用拆解好的複雜模型，即可運轉。</span></p>
<p><a href="/downloads/fb.zip">fourbar_box2_41223226</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/uxAOKz6xdIQ" width="400"></iframe></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p><span>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41223226</span></p>
<p>從base開始一步一步堆疊關節和零件最後在建立場景。</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hD1D65XulPI" width="400"></iframe></p>
<p><a href="/downloads/mp.zip">Webots 桌上籃球遊戲機模擬系統</a></p>
<p></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:各週按時更新，完成了跟list相關的全部程式，完成<span>Webots Tutorial 1~6 完成HW1 四連桿的組立和運轉。</span></p>
<p>各週網頁內容:</p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/repo.html">全班 list</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/ipv6.html">ipv6 list</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/list.html">小組 list</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/w3.html">未分組名單 list</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/task5.html">Webots Tutorial 1~3</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/task6.html">Webots Tutorial 4~6</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223226-0/content/HW1.html">HW1</a></p>
<p>期中心得:</p>
<p>這半個學期學到了很多關於list的程式，學到了節省算力的概念，能用更簡單的方式達成，就不要用複雜的方法，還大致上學會了Webots要如何使用，光是這幾週就讓我受益良多，希望能夠在更深入的了解。</p>
<p>期中自評影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gZhyimAwJ3A" width="400"></iframe></p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41223226</p>
<p><a href="/downloads/Exam1_41223226.zip">Exam1</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QNSbRIO-yYI" width="400"></iframe></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41223226</p>
<p><a href="/downloads/Exam2_41223226.zip">Exam2</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/DIIqBplzhuk" width="400"></iframe></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: Webots 動態投籃模擬系統的協同設計</span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p><a href="/downloads/程式 文件.pdf">Webots 動態投籃模擬系統的協同設計_第三組_報告.pdf</a></p>
<p><strong>fourbar_controller.py</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard
import time

# 常數定義
TIME_STEP = 32  # 模擬步長，單位毫秒
MAX_VELOCITY = 10.0  # 輪子的最大速度
ANGLE_STEP = 40 * 3.14159 / 180  # 40 度轉為弧度，作為擊球角度
POSITION_M = ANGLE_STEP          # motor 擊出角度（+40度）
POSITION_K = 0.0                 # motor 收回角度（0度）
KICK_DELAY = 0.5                 # 擊出後等待時間（秒）

# 初始化機器人與鍵盤控制
robot = Robot()
timestep = int(robot.getBasicTimeStep())
keyboard = Keyboard()
keyboard.enable(timestep)  # 啟用鍵盤事件監聽

# 嘗試取得 motor 與對應的感測器
try:
    motor = robot.getDevice('motor1')  # 擊球機構用的伺服馬達
    sensor = robot.getDevice('motor1_sensor')  # 馬達的位置感測器
    sensor.enable(timestep)
    mechanism_enabled = True  # 如果取得成功，表示擊球裝置可用
except Exception:
    mechanism_enabled = False  # 否則關閉機構功能

# 嘗試取得輪子馬達（移動平台）
try:
    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]  # 四個輪子馬達
    for wheel in wheels:
        wheel.setPosition(float('inf'))  # 設定為速度控制模式（非位置控制）
        wheel.setVelocity(0)  # 初始速度為 0
    platform_enabled = True  # 若成功取得，表示移動平台可用
except Exception:
    platform_enabled = False

# 用來避免重複偵測按鍵（去彈跳）
key_pressed = {
    'k': False
}

# 主循環
while robot.step(timestep) != -1:
    key = keyboard.getKey()  # 讀取目前按下的按鍵

    # 平台移動控制（如果有輪子）
    if platform_enabled:
        if key == Keyboard.UP:
            # 向前
            for wheel in wheels:
                wheel.setVelocity(MAX_VELOCITY)
        elif key == Keyboard.DOWN:
            # 向後
            for wheel in wheels:
                wheel.setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.LEFT:
            # 左轉（右輪正轉，左輪反轉）
            wheels[0].setVelocity(MAX_VELOCITY)
            wheels[1].setVelocity(-MAX_VELOCITY)
            wheels[2].setVelocity(MAX_VELOCITY)
            wheels[3].setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.RIGHT:
            # 右轉（左輪正轉，右輪反轉）
            wheels[0].setVelocity(-MAX_VELOCITY)
            wheels[1].setVelocity(MAX_VELOCITY)
            wheels[2].setVelocity(-MAX_VELOCITY)
            wheels[3].setVelocity(MAX_VELOCITY)
        elif key == ord('Q') or key == ord('q'):
            # 按 Q 鍵退出程式
            print("Exiting...")
            break
        else:
            # 沒有按方向鍵時停止移動
            for wheel in wheels:
                wheel.setVelocity(0)

    # 擊球機構控制（如果有 motor）
    if mechanism_enabled:
        if key == ord('M') or key == ord('k'):
            if not key_pressed['M']:
                print("[KICK] 出擊 → 收回")
                motor.setPosition(POSITION_M)  # 設定擊球角度（出擊）

                # 非阻塞式等待 0.5 秒（等待擊球完成）
                start_time = robot.getTime()
                while robot.step(timestep) != -1:
                    if robot.getTime() - start_time &gt;= KICK_DELAY:
                        break

                motor.setPosition(POSITION_K)  # 收回擊球機構
            key_pressed['M'] = True  # 記錄已按下
        else:
            key_pressed['M'] = False  # 沒有按鍵，重設狀態
</pre>
<p><strong>feed_ball.py</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Supervisor, Keyboard
import time
import random
import numpy as np
import re

class BallManager:
    # 球體半徑
    SPHERE_RADIUS = 0.1
    # 軌跡點半徑
    TRAJECTORY_POINT_RADIUS = 0.03
    # 軌跡點距離間隔
    TRAJECTORY_POINT_STEP = 0.12
    # 軌跡點最大數量
    TRAJECTORY_MAX_POINTS = 5
    # 按鍵去彈跳時間(秒)
    DEBOUNCE_TIME = 0.5
    # 印出位置資訊間隔(秒)
    PRINT_INTERVAL = 0.2
    # 球落地判斷閾值(z軸高度)
    LANDING_THRESHOLD_Z = 0.13

    def __init__(self, supervisor: Supervisor):
        self.supervisor = supervisor
        self.timestep = int(supervisor.getBasicTimeStep())
        self.keyboard = Keyboard()
        self.keyboard.enable(self.timestep)  # 啟用鍵盤偵測

        # 等待擊出的靜止球的 DEF 名稱和資訊
        self.waiting_ball_def = None
        self.waiting_ball_info = None

        self.last_key_time = 0  # 上次按鍵時間(用於去彈跳)
        self.last_print_time = 0  # 上次印出位置時間

        self.trajectory_points = []  # 軌跡點列表，存 (位置, DEF 名稱)
        self.current_tracked_def = None  # 目前追蹤的球 DEF 名稱

        # 取得 youbot 節點，用來做座標轉換
        self.youbot_node = supervisor.getFromDef('youbot')
        if self.youbot_node is None:
            raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")

        # 球產生的本地位置 (相對 youbot)
        self.default_feed_pos = (-0.35, 0.0, 0.9)

        # 用來匹配球 DEF 名稱的正則表達式（目前未用，但可擴充）
        self.ball_def_pattern = re.compile(r"Sphere_\d+")

    def axis_angle_to_rotation_matrix(self, axis, angle):
        # 將軸角旋轉轉成 3x3 旋轉矩陣 (numpy陣列)
        x, y, z = axis
        c = np.cos(angle)
        s = np.sin(angle)
        C = 1 - c
        return np.array([
            [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],
            [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],
            [z*x*C - y*s, z*y*C + x*s, z*z*C + c]
        ])

    def generate_valid_def_name(self, base_name="Sphere"):
        # 產生唯一的 DEF 名稱，防止重複衝突
        timestamp = int(self.supervisor.getTime() * 1000)
        return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"

    def generate_random_color(self):
        # 隨機產生 RGB 三色(0~1之間浮點數)
        return random.random(), random.random(), random.random()

    def youbot_local_to_world(self, local_pos):
        # 將 youbot 本地座標轉換成世界座標
        youbot_translation = np.array(self.youbot_node.getField('translation').getSFVec3f())
        youbot_rotation = self.youbot_node.getField('rotation').getSFRotation()
        axis = youbot_rotation[:3]
        angle = youbot_rotation[3]
        rot_mat = self.axis_angle_to_rotation_matrix(axis, angle)
        rotated = rot_mat @ np.array(local_pos)
        world_pos = youbot_translation + rotated
        return tuple(world_pos)

    def create_static_ball(self, def_name, world_pos, r, g, b):
        # 在世界中產生靜止的球
        sphere_str = f"""
        DEF {def_name} Solid {{
          translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
          contactMaterial "ball"
          children [
            Shape {{
              geometry Sphere {{
                radius {self.SPHERE_RADIUS}
              }}
              appearance Appearance {{
                material Material {{
                  diffuseColor {r} {g} {b}
                }}
              }}
            }}
          ]
          boundingObject Sphere {{
            radius {self.SPHERE_RADIUS}
          }}
        }}
        """
        self.supervisor.getRoot().getField("children").importMFNodeFromString(-1, sphere_str)

    def create_dynamic_ball(self, def_name, world_pos, r, g, b):
        # 在世界中產生可動態物理的球（可被擊出）
        sphere_str = f"""
        DEF {def_name} Solid {{
          translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
          contactMaterial "ball"
          children [
            Shape {{
              geometry Sphere {{
                radius {self.SPHERE_RADIUS}
              }}
              appearance Appearance {{
                material Material {{
                  diffuseColor {r} {g} {b}
                }}
              }}
            }}
          ]
          boundingObject Sphere {{
            radius {self.SPHERE_RADIUS}
          }}
          physics Physics {{
            mass 0.01
            density -1
          }}
        }}
        """
        self.supervisor.getRoot().getField("children").importMFNodeFromString(-1, sphere_str)

    def create_trajectory_point(self, pos):
        # 建立一個透明橘色小球作為軌跡點
        def_name = self.generate_valid_def_name("TrajectoryPt")
        sphere_str = f"""
        DEF {def_name} Transform {{
          translation {pos[0]} {pos[1]} {pos[2]}
          children [
            Shape {{
              geometry Sphere {{
                radius {self.TRAJECTORY_POINT_RADIUS}
              }}
              appearance Appearance {{
                material Material {{
                  diffuseColor 1 0.7 0
                  transparency 0.3
                }}
              }}
            }}
          ]
        }}
        """
        self.supervisor.getRoot().getField("children").importMFNodeFromString(-1, sphere_str)
        return def_name

    def delete_trajectory_points(self):
        # 刪除所有軌跡點物件
        for _, def_name in self.trajectory_points:
            node = self.supervisor.getFromDef(def_name)
            if node:
                node.remove()
        self.trajectory_points.clear()

    def create_static_sphere(self, x, y, z):
        # 嘗試產生一顆靜止球
        if self.waiting_ball_def is not None:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
            return False
        def_name = self.generate_valid_def_name()
        world_pos = self.youbot_local_to_world((x, y, z))
        r, g, b = self.generate_random_color()
        self.waiting_ball_def = def_name
        self.waiting_ball_info = (world_pos, r, g, b)
        self.create_static_ball(def_name, world_pos, r, g, b)
        self.current_tracked_def = def_name
        self.delete_trajectory_points()  # 新球產生，清除舊軌跡點
        print(f"已產生靜止球 {def_name} 於 {world_pos}")
        return True

    def activate_dynamic_ball(self):
        # 將等待的靜止球刪除並重新產生為動態球（可被擊出）
        if self.waiting_ball_def is None or self.waiting_ball_info is None:
            print("沒有等待擊出的球。")
            return False
        ball_node = self.supervisor.getFromDef(self.waiting_ball_def)
        if ball_node:
            ball_node.remove()
            self.supervisor.step(self.timestep)  # 等待場景更新
        world_pos, r, g, b = self.waiting_ball_info
        self.create_dynamic_ball(self.waiting_ball_def, world_pos, r, g, b)
        print(f"球 {self.waiting_ball_def} 變成動態球")
        self.waiting_ball_def = None
        self.waiting_ball_info = None
        return True

    def is_ball_landed(self, pos):
        # 判斷球是否已落地(根據 z 軸高度)
        return pos[2] &lt; self.LANDING_THRESHOLD_Z

    def run(self):
        # 主程式迴圈，處理按鍵與軌跡追蹤
        print("按 A 產生一顆靜止球，按 M 讓球變 dynamic 可擊出")
        while self.supervisor.step(self.timestep) != -1:
            key = self.keyboard.getKey()
            current_time = time.time()

            # 按鍵去彈跳判斷
            if key != -1 and (current_time - self.last_key_time &lt; self.DEBOUNCE_TIME):
                key = -1

            if key == ord('A'):
                # 按 A 產生靜止球
                if self.create_static_sphere(*self.default_feed_pos):
                    self.last_key_time = current_time

            elif key == ord('M'):
                # 按 M 使球成為動態球
                if self.activate_dynamic_ball():
                    self.last_key_time = current_time

            # 軌跡點追蹤
            if self.current_tracked_def:
                ball_node = self.supervisor.getFromDef(self.current_tracked_def)
                if ball_node:
                    pos = ball_node.getPosition()
                    # 定時印出位置資訊
                    if current_time - self.last_print_time &gt;= self.PRINT_INTERVAL:
                        print(f"球 {self.current_tracked_def} 位置: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")
                        self.last_print_time = current_time

                    # 如果球移動超過軌跡間距，新增軌跡點
                    if (not self.trajectory_points) or np.linalg.norm(np.array(pos) - np.array(self.trajectory_points[-1][0])) &gt; self.TRAJECTORY_POINT_STEP:
                        def_name = self.create_trajectory_point(pos)
                        self.trajectory_points.append((pos, def_name))
                        # 軌跡點數量超過限制，刪除最舊的
                        if len(self.trajectory_points) &gt; self.TRAJECTORY_MAX_POINTS:
                            _, old_def = self.trajectory_points.pop(0)
                            old_node = self.supervisor.getFromDef(old_def)
                            if old_node:
                                old_node.remove()

                    # 球落地，清除軌跡點
                    if self.is_ball_landed(pos):
                        self.delete_trajectory_points()
                else:
                    # 找不到球，清除軌跡並停止追蹤
                    self.delete_trajectory_points()
                    self.current_tracked_def = None

if __name__ == "__main__":
    supervisor = Supervisor()
    ball_manager = BallManager(supervisor)
    ball_manager.run()</pre>
<p><strong>basket.py</strong></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard, Emitter  # 匯入 Webots 控制所需的模組

# 常數設定
WHEEL_RADIUS = 0.1  # 輪子半徑（單位：公尺）
L = 0.471  # 機器人長度的一半（用於運動學計算）
W = 0.376  # 機器人寬度的一半
MAX_VELOCITY = 10.0  # 輪子最大速度

# 初始化機器人與鍵盤
robot = Robot()
timestep = int(robot.getBasicTimeStep())  # 取得模擬的時間步長
keyboard = Keyboard()
keyboard.enable(timestep)  # 啟用鍵盤控制

# 取得發射器裝置，用來傳送得分
emitter = robot.getDevice("score_emitter")

# 取得距離感測器裝置
sensor = robot.getDevice('sensor')
sensor.enable(timestep)  # 啟用感測器
score = 0  # 初始得分為 0
last_score_time = 0  # 上一次得分的時間
cooldown = 1.0  # 冷卻時間（秒）

# 取得四個輪子的馬達裝置
wheel5 = robot.getDevice("wheel5")  # 右前輪
wheel6 = robot.getDevice("wheel6")  # 左前輪
wheel7 = robot.getDevice("wheel7")  # 右後輪
wheel8 = robot.getDevice("wheel8")  # 左後輪

# 啟用速度控制模式（無限位置）
for wheel in [wheel5, wheel6, wheel7, wheel8]:
    wheel.setPosition(float('inf'))  # 設定馬達為無限轉動模式
    wheel.setVelocity(0)  # 初始速度為 0

# 設定四個輪子的速度
def set_wheel_velocity(v1, v2, v3, v4):
    wheel5.setVelocity(v1)
    wheel6.setVelocity(v2)
    wheel7.setVelocity(v3)
    wheel8.setVelocity(v4)

# A/D 轉換值對應距離的查表（模擬非線性感測器）
lookup_table = [
    (1000, 0.00),
    (620, 0.12),
    (372, 0.13),
    (248, 0.14),
    (186, 0.15),
    (0, 0.18)
]

# 將感測器讀到的 AD 值轉換為距離（內插法）
def ad_to_distance(ad_value):
    for i in range(len(lookup_table) - 1):
        a0, d0 = lookup_table[i]
        a1, d1 = lookup_table[i + 1]
        if a1 &lt;= ad_value &lt;= a0:
            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)
    if ad_value &gt; lookup_table[0][0]:
        return lookup_table[0][1]  # 超出最大值時回傳最小距離
    return lookup_table[-1][1]  # 小於最小 AD 值時回傳最大距離

# 顯示操作說明
print("Controls:")
print("U = forward, J = backward, H = turn left, K = turn right, Q = quit")

# 主迴圈
keys = set()
while robot.step(timestep) != -1:
    key = keyboard.getKey()  # 讀取按鍵輸入
    while key != -1:
        keys.add(key)
        key = keyboard.getKey()

    # 取得感測器數值並轉換為距離
    sensor_value = sensor.getValue()
    distance = ad_to_distance(sensor_value)
    current_time = robot.getTime()

    # 如果按下 M 或 K，顯示目前距離
    if ord('M') in keys or ord('m') in keys:
        print("Distance (M):", distance)
    if ord('K') in keys or ord('k') in keys:
        print("Distance (K):", distance)

    # 如果距離小於 0.18 且符合冷卻時間，則得分 +2
    if distance &lt; 0.18 and (current_time - last_score_time) &gt; cooldown:
        score += 2
        last_score_time = current_time
        print("得分 +2")
        print("Current Distance:", distance)
        emitter.send(str(2))  # 傳送得分資料給其他模組或使用者介面

    # 控制移動
    if ord('U') in keys or ord('u') in keys:
        # 前進
        set_wheel_velocity(MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY)
    elif ord('J') in keys or ord('j') in keys:
        # 後退
        set_wheel_velocity(-MAX_VELOCITY, -MAX_VELOCITY, -MAX_VELOCITY, -MAX_VELOCITY)
    elif ord('K') in keys or ord('k') in keys:
        # 向右轉（右輪倒轉，左輪前進）
        set_wheel_velocity(-MAX_VELOCITY, MAX_VELOCITY, -MAX_VELOCITY, MAX_VELOCITY)
    elif ord('H') in keys or ord('h') in keys:
        # 向左轉（左輪倒轉，右輪前進）
        set_wheel_velocity(MAX_VELOCITY, -MAX_VELOCITY, MAX_VELOCITY, -MAX_VELOCITY)
    elif ord('Q') in keys or ord('q') in keys:
        # 結束程式
        print("Exiting...")
        break
    else:
        # 沒有按任何鍵時停止
        set_wheel_velocity(0, 0, 0, 0)

    keys.clear()  # 清除本次讀取的按鍵</pre>
<p><a href="/downloads/final project (4).7z">Final_Project</a></p>
<p>心得:</p>
<p data-end="233" data-start="111">這次的專案我負責了三個主要程式：fourbar_controller.py、feed_ball.py 以及 stand_controller.py。透過這些程式，我深入了解了機械四連桿機構的控制邏輯與實作方式，以及機器人自動化執行任務的流程。</p>
<p data-end="425" data-start="235">在 fourbar_controller.py 中，我學會如何運用程式來調整四連桿的位置，精確調整各關節的角度，使機構能穩定且連續地執行動作。feed_ball.py 則讓我體會到自動化流程中，如何設計餵球機制，包含感測器偵測與馬達驅動的配合，確保物料能順利送達。</p>
<p data-end="557" data-start="427">整體而言，這次專案讓我不僅增強了程式撰寫能力，也加深對機械結構控制的理解。面對實務挑戰時，需要同時考慮軟體邏輯與硬體機構的整合，這對我未來的工程學習與專題開發都有很大幫助。未來我希望能將這些經驗延伸到更複雜的機械系統設計中，持續提升系統穩定性與自動化效率。</p>
<p data-end="557" data-start="427"></p>
<p>影片標題: <span>國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41223226 - 程式展示</span><span style="background-color: #ffff00;"><br/></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/F0mct2BmE9E" width="400"></iframe></span></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>